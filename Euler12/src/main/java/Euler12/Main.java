/*
The sequence of triangle numbers is generated by adding the natural numbers. 
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
 */
package Euler12;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
/**
 *
 * @author Richard
 */
public class Main {

    public static int numberOfDivisors(long currentSum)
    {
        ArrayList <Long> rootOfSum = new ArrayList<Long>(0);
        ArrayList <Long> remainder = new ArrayList<Long>(0);
        long squareRoot = (long) Math.sqrt((double)currentSum);
        
        for (long i = 1;i<squareRoot;i++)
        {
            if(currentSum%i==0)
            {
                rootOfSum.add(i);
            }
        }
        for (int i = 0;i<rootOfSum.size();i++)
        {
            remainder.add(currentSum/rootOfSum.get(i));
        }
        rootOfSum.addAll(remainder);
        List<Long> divisorsWithoutDuplicates = rootOfSum.stream().distinct().collect(Collectors.toList());
        return divisorsWithoutDuplicates.size();
    }    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) 
    {
    long startTime = System.currentTimeMillis();        
    // TODO code application logic here
        int divisors = 1;
        int index = 1;
        long sum = 0;
        long max = 0;
            while(divisors<501)        
            {
            sum+=index;
            divisors = numberOfDivisors(sum);
            index++;
                if(divisors>max)
                {
                    max = divisors;
                    System.out.println("index:" + (index - 1));
                    System.out.println("sum:" + sum);
                    System.out.println("max:" + max);
                    System.out.println();
                }
            }

        
        Long endTime = System.currentTimeMillis();
        System.out.println("That took " + (endTime - startTime) + " milliseconds");
    }
}
