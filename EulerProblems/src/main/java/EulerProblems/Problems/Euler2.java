/*
Each new term in the Fibonacci sequence is generated by adding the previous 
two terms. By starting with 1 and 2, the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed 
four million, find the sum of the even-valued terms.
 */

package EulerProblems.Problems;
/*
* @author Richard Bowen
*/
    public class Euler2 extends EulerProblems.Problem{
        //constructor
        public Euler2()
        {
            this.name = "Euler 2";
        }
    
    //Solution implementation
    @Override
    public void Solution() {
       
        // Variable sum will be used to store the sum of the numbers
        int sum = 2;
        //Variables to hold two consecutive numbers
        int fib1;
        int fib2 = 2;
        //Iterate fibonacci from 1 to 3999999 
        //and if divisible by two, add it to sum
        for(int i = 3;i<4000000;i++)
            {
            //Change fib1 to the value of i
            fib1 = i;      
            if(i%2==0)
                {
                //add the value of i to the current value of sum
                sum+=i;
                }
            //Make i equal to the sum of the two current numbers 
            //Subtract 1 for the iterator
            i = fib1 + fib2 - 1;
            //Make fib2 equal to fib1 equal to the first            
            fib2 = fib1;
            }
        System.out.println(name + ": " + sum);
    }
}
